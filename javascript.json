{

	"For Loop": {
		"prefix": "for1",
		"body": [
			"for (var ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
			"\tvar ${3:element} = ${2:array}[${1:index}];",
			"\t$0",
			"}"
		],
		"description": "For Loop"
	},

	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	},

	"try and catch": {
		"prefix": "try",
		"body": [
			"try {",
			"\t$0",
			"}catch(error) {",
			"\tconsole.log(error);",
			"}"
		],
		"description": "Try and Catch"
	},

	//------------------------------Redux/React- Actions---------------------------------
	"comp": {
		"prefix": "comp",
		"body": [
			"import React, { Component } from 'react';",
			"",
			"export default class ${1:index} extends Component {",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t}",
			"",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t$0",
			"\t\t);",
			"\t}",
			"}"
		],
		"description": "Basic React Component"
	},

	"compitem": {
		"prefix": "compitem",
		"body": [
			"export default class ${1:index} extends Component {",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t}",
			"",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t$0",
			"\t\t);",
			"\t}",
			"}"
		],
		"description": "Basic React Component without imports"
	},
	
	"map": {
		"prefix": "map",
		"body": [
      "{items.map((item) => {",
      "\tlet retVal = null;",
      "\t\tretVal = (<${1:CompItemName}",
      "\t\t\titem={item}",
			"\t\t\tkey={item.id}",
			"\t\t\t$0",
      "\t\t/>",
      "\t\t);",
      "\treturn retVal;",
      "})}"
		],
		"description": "JXS Map collection"
	},

	"componentDidMount": {
		"prefix": "did",
		"body": [
			"componentDidMount() {",
			"\t$0",
			"}"
		],
		"description": "is invoked immediately after a component is mounted."
	},
	
	"componentWillUnmount": {
		"prefix": "un",
		"body": [
			"componentWillUnmount() {",
			"\t$0",
			"}"
		],
		"description": " is invoked immediately before a component is unmounted and destroyed."
	},
	"componentWillMount": {
		"prefix": "will",
		"body": [
			"componentWillMount() {",
			"\t$0",
			"}"
		],
		"description": "is invoked immediately before mounting occurs."
	},

	"shouldComponentUpdate": {
		"prefix": "should",
		"body": [
			"shouldComponentUpdate(nextProps, nextState){",
			"\treturn true;",
			"\t$0",
			"}"
		],
		"description": "shouldComponentUpdate triggered before the re-rendering starts"
	},

	"connect": {
		"prefix": "connect",
		"body": [
			"const mapStateToProps = (state) => ({",
			"\tpage: state.global.page,",
			"});",
			"",
			"function mapDispatchToProps(dispatch) {",
			"\treturn {",
			"\t\tupdateSelectedPage: (page) => dispatch(updateSelectedPage(page)),",
			"\t\tupdateNavigation: (route) => dispatch(updateNavigation(route)),",
			"\t};",
			"}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(\t$0);"
		],
		"description": "provides basic global props and dispatch functions."
	}
}